  extraReducers:(builder)=> {

    builder.addCase(campaignCreationArtist.pending, (state, action) => {
      state.status = 'loading'
    })
    builder.addCase(campaignCreationArtist.fulfilled, (state, action) => {
      // state.role = action.role
    })
    builder.addCase(campaignCreationArtist.rejected, (state, action) => {
      state.error = action.error.message
    })

    builder.addCase(campaignCreationNGO.pending, (state, action) => {
      state.status = 'loading'
    })
    builder.addCase(campaignCreationNGO.fulfilled, (state, action) => {
      // state.role = action.role
    })
    builder.addCase(campaignCreationNGO.rejected, (state, action) => {
      state.error = action.error.message
    })

    builder.addCase(campaignCreationStartup.pending, (state, action) => {
      state.status = 'loading'
    })
    builder.addCase(campaignCreationStartup.fulfilled, (state, action) => {
      // state.role = action.role
    })
    builder.addCase(campaignCreationStartup.rejected, (state, action) => {
      state.error = action.error.message
    })

    builder.addCase(getNGO.pending, (state, action) => {
      state.status = 'loading'
    })
    builder.addCase(getNGO.fulfilled, (state, action) => {
      state.ngoCampaignDetails = action.payload.data.data;
    })
    builder.addCase(getNGO.rejected, (state, action) => {
      state.error = action.error.message
    })

    builder.addCase(getStartUp.pending, (state, action) => {
      state.status = 'loading'
    })
    builder.addCase(getStartUp.fulfilled, (state, action) => {
      state.startupCampaignDetails = action
    })
    builder.addCase(getStartUp.rejected, (state, action) => {
      state.error = action.error.message
    })

    builder.addCase(getStartUp.pending, (state, action) => {
      state.status = 'loading'
    })
    builder.addCase(getStartUp.fulfilled, (state, action) => {
      state.artistCampaignDetails = action
    })
    builder.addCase(getStartUp.rejected, (state, action) => {
      state.error = action.error.message
    })
  }
})
